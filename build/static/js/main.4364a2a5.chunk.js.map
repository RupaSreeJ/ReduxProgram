{"version":3,"sources":["mock/MockData.js","component/common/action/action-axios.js","component/countries-dropdown.js","component/App.js","reportWebVitals.js","component/common/reducer/rindex.js","component/common/reducer/root-reducer.js","index.js"],"names":["Data","heading","countries","fetchCall","name","dispatch","axios","get","then","res","type","payload","dropdown2","DropDown","props","state","dropdown1","selectdd","data","isLoaded","this","setState","e","Promise","resolve","target","value","onChange","selectChange","bind","map","x","Component","defaultProps","App","className","apiCall","actionCreator","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","intialState","mainReducer","action","newState","combineReducers","store","createStore","reducer","ReactDOM","render","document","getElementById"],"mappings":"qNAIeA,EAJF,CACTC,QAAQ,gBACTC,UAAY,CAAC,SAAU,OAAQ,WAAW,W,yBCgD9B,SAASC,EAAUC,GAC9B,OAAO,SAACC,GACJ,OAAOC,IAAMC,IAAI,2CAA6CH,GAAMI,MAAK,SAACC,GAEtEJ,EAAS,CACLK,KAAM,iBACNC,QAAS,CAAEC,UAAWH,S,WClDzBI,EAAb,kDACK,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTC,UAAW,GACXJ,UAAW,GACXK,SAAU,GACVC,KAAM,GACNC,UAAU,GAPC,EADxB,qDAaK,WACEC,KAAKC,SAAS,CACTL,UAAWI,KAAKN,MAAMZ,YAczBkB,KAAKN,MAAMX,UAAUiB,KAAKN,MAAMZ,UAAU,MA7BnD,0BA+BK,SAAaoB,GAAI,IAAD,OAGZC,QAAQC,QAAQJ,KAAKN,MAAMX,UAAUmB,EAAEG,OAAOC,QAAQlB,MAAK,WACxD,EAAKa,SAAS,CAAEJ,SAAUK,EAAEG,OAAOC,MAAOd,UAAU,EAAKE,MAAMF,iBAnC3E,oBAsCK,WACI,OACI,gCACA,wBAAQc,MAAON,KAAKL,MAAME,SAAUU,SAAUP,KAAKQ,aAAaC,KAAKT,MAArE,SAEIA,KAAKL,MAAMC,UAAUc,KAAI,SAAAC,GACzB,OAAO,iCAASA,SAInB,iCAECX,KAAKL,MAAMH,UAAUkB,KAAI,SAAAC,GAC1B,OAAS,iCAASA,EAAE3B,mBAnDlC,GAA8B4B,aAwF9BnB,EAASoB,aAAejC,EACPa,QC1FVqB,E,4JACL,WACA,OACE,sBAAKC,UAAU,MAAf,UACE,6BAAKf,KAAKN,MAAMb,UAChB,cAAC,EAAD,CAAUiB,KAAMlB,EAAMoC,QAASC,W,GALlBL,aAUnBE,EAAID,aAAejC,EACJkC,QCJAI,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhC,MAAK,YAAkD,IAA/CiC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,uBCNVO,EAAc,CAChB5B,KAAM,GACNN,UAAW,MAmBEmC,EAjBK,WAAkC,IAAjChC,EAAgC,uDAAxB+B,EAAaE,EAAW,uCACnD,GAAoB,mBAAhBA,EAAOtC,KAA2B,CAOpC,IAAIuC,EAAQ,eAAQlC,GAEpB,OADAkC,EAASrC,UAAYoC,EAAOrC,QAAQC,UAC7BqC,EAEP,OAAO,eACFlC,IChBMmC,cAAgB,CAC3BH,YAAaA,ICOXI,EAAQC,YAAYC,GAC1BF,EAAM9C,SAAS,CAACK,KAAM,aACrB4C,IAASC,OAER,cAAC,IAAD,CAAUJ,MAAOA,EAAjB,SACA,cAAC,EAAD,MAEAK,SAASC,eAAe,SAO1BnB,M","file":"static/js/main.4364a2a5.chunk.js","sourcesContent":["const Data = {\r\n    heading:\"Countries App\",\r\n   countries : ['Africa', 'Asia', 'Americas','Europe']\r\n}\r\nexport default Data;","//actionCreator.js\r\nimport axios from \"axios\";\r\n/* import { selectValue, fetchSuccess, fetchError } from \"../action/actionEvent\";\r\n\r\nconst actionCreator = (url) => (dispatch) => {\r\n  dispatch(selectValue());                                                                    //in replace of fetchData i use selectValue\r\nreturn new Promise(() => {\r\n  axios\r\n    .get(url)\r\n    .then(response => {\r\n      dispatch(fetchSuccess(response.data));\r\n    })\r\n    .catch(error => {\r\n      dispatch(fetchError(error));\r\n      console.log(error);\r\n    });\r\n});\r\n};\r\n\r\nexport default actionCreator;   */\r\n/* export default function fetchCall(name){\r\n    var url = \"https://restcountries.eu/rest/v2/region/\"+ name\r\n    axios.get(url)\r\n        .then(res => res.json())\r\n    .then(\r\n        (result) => {\r\n            if(result.length)\r\n            {  \r\n                this.setState({\r\n                    isLoaded: true,\r\n                    dropdown2: result\r\n                });\r\n            }\r\n            else\r\n            {\r\n                this.setState({\r\n                    isLoaded: true,\r\n                    dropdown2: []\r\n                });\r\n            }\r\n        },\r\n     (error) => {\r\n        this.setState({\r\n            isLoaded: false,\r\n            dropdown2: []\r\n        });\r\n    }\r\n  )\r\n    }\r\n */\r\nexport default function fetchCall(name) {\r\n    return (dispatch) => {\r\n        return axios.get(\"https://restcountries.eu/rest/v2/region/\" + name).then((res) => {\r\n            // dispatch(selectValue(res.data.name));\r\n            dispatch({\r\n                type: \"SELECTED_VALUE\",\r\n                payload: { dropdown2: res }\r\n            })\r\n\r\n        })\r\n    }\r\n}\r\n\r\n\r\n\r\n// export const selectValue = event => ({\r\n//     type: 'SELECTED_VALUE',\r\n//     payload: event\r\n// })  ","import React, { Component } from 'react'\r\nimport fetchCall from '../component/common/action/action-axios'\r\n//import axios from 'axios';\r\n//import apiCall from \"../component/common/action/action-axios\"\r\n\r\nimport Data from '../mock/MockData'\r\nexport class DropDown extends Component {\r\n     constructor(props) {\r\n         super(props);\r\n         this.state = {\r\n             dropdown1: [],\r\n             dropdown2: [],\r\n             selectdd: '',\r\n             data: '',\r\n             isLoaded: false\r\n          };\r\n       \r\n     }\r\n     \r\n     componentDidMount() {\r\n       this.setState({                          // debugger; \r\n            dropdown1: this.props.countries\r\n         });\r\n         /*  this.props.apiCall(\"https://restcountries.eu/rest/v2/region/Africa\")\r\n      .then(() => {\r\n        const data = this.props.data;\r\n        this.setState({\r\n          data,\r\n        });\r\n      })\r\n      .catch(error => {\r\n        console.log(error);\r\n      });  */\r\n         \r\n         //this.fetchCall(this.props.countries[0])  //this.props.fetchCall()\r\n         this.props.fetchCall(this.props.countries[0])\r\n     }\r\n     selectChange(e) {\r\n         \r\n         //this.fetchCall(e.target.value);\r\n         Promise.resolve(this.props.fetchCall(e.target.value)).then(() => {\r\n            this.setState({ selectdd: e.target.value, dropdown2:this.props.dropdown2 });\r\n         });\r\n     }\r\n     render() {\r\n         return (\r\n             <div>\r\n             <select value={this.state.selectdd} onChange={this.selectChange.bind(this)}>\r\n              {\r\n                 this.state.dropdown1.map(x => {\r\n                 return <option>{x}</option>\r\n                 })\r\n               }\r\n             </select>\r\n              <select>\r\n              {\r\n               this.state.dropdown2.map(x => {\r\n              return   <option>{x.name}</option> \r\n           })\r\n           }\r\n          </select> \r\n          </div>\r\n         )\r\n     }\r\n     /* fetchCall(name){\r\n        var url = \"https://restcountries.eu/rest/v2/region/\"+ name\r\n        axios.get(url)\r\n        .then((response)=>{\r\n            var data = response.data;\r\n            if(data.length)\r\n            {  \r\n                this.setState({\r\n                    isLoaded: true,\r\n                    dropdown2: data\r\n                });\r\n            }\r\n            else\r\n            {\r\n                this.setState({\r\n                    isLoaded: true,\r\n                    dropdown2: []\r\n                });\r\n            }\r\n        },\r\n        (error) => {\r\n                this.setState({\r\n                    isLoaded: false,\r\n                    dropdown2: []\r\n                });\r\n            }\r\n        )\r\n        \r\n    } */\r\n }\r\nDropDown.defaultProps = Data\r\n  export default DropDown;\r\n ","import React , {Component} from 'react';\nimport Data from '../mock/MockData'\nimport './styles.css'\nimport DropDown from '../component/countries-dropdown'\nimport actionCreator from './common/action/action-axios';\nclass  App extends Component {\n  render(){\n  return (\n    <div className=\"App\">\n      <h1>{this.props.heading}</h1>\n      <DropDown data={Data} apiCall={actionCreator}/> \n   </div>\n  );\n}\n}\nApp.defaultProps = Data\nexport default App;\n   \n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","\r\nlet intialState = {\r\n  data: [],\r\n  dropdown2: null\r\n}\r\nconst mainReducer = (state = intialState, action) => {\r\n  if (action.type === \"SELECTED_VALUE\") {\r\n    // return{\r\n    //   let newState={...state}   \r\n    //     // ...state,\r\n    //     // selectValue: action.region,\r\n    //     newState.dropdown2=action\r\n    // }\r\n    let newState = { ...state }\r\n    newState.dropdown2 = action.payload.dropdown2\r\n    return newState;\r\n  } else {\r\n    return {\r\n      ...state\r\n    }\r\n  }\r\n}\r\nexport default mainReducer;\r\n/* import ACTION_TYPES from '../action/actionTypes';\r\n\r\nconst initialState = {\r\n  loading: false,\r\n  data: '',\r\n  error: ''\r\n};\r\n\r\n const apiReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case ACTION_TYPES.SELECTED_VALUE: //API_PENDING\r\n      return {\r\n        ...state,\r\n        loading: true,\r\n      };\r\n   case ACTION_TYPES.API_SUCCESS:\r\n      return {\r\n        ...state,\r\n        data: action.payload,\r\n        loading:false,\r\n      };\r\n    case ACTION_TYPES.API_ERROR:\r\n      return {\r\n        ...state,\r\n        error: action.payload,\r\n        loading:false,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default apiReducer;  */","import { combineReducers } from 'redux';\r\nimport mainReducer from './rindex';\r\nexport default combineReducers({\r\n    mainReducer: mainReducer\r\n})","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n//import App from './App';\nimport App from './component/App';\nimport reportWebVitals from './reportWebVitals';\nimport { createStore } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport reducer from './component/common/reducer/root-reducer'\n\nconst store = createStore(reducer);\nstore.dispatch({type: \"DropDown\"})\n ReactDOM.render(\n \n  <Provider store={store}>\n  <App />\n</Provider>,\n  document.getElementById('root')\n); \n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))store={store}\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}